#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox @application system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#

require 'rubygems'
require 'optparse'
require 'erb'
require 'fileutils'

@mongrelhost = "127.0.0.1"
@mongrels = 2
@aliases = ''

WEBSERVER='nginx'

def has_required_options?
  [@application, @webroot, @domain, @port].all?
end

OptionParser.new do |opts|
  opts.banner = "brightbox-apache creates an Apache config for a Rails app\n"
  opts.banner << "Usage: #{$0} [options] [args]"

  opts.on("-nAPPLICATION_NAME", "--name APPLICATION_NAME",
    "Name of application environment (a short useful name for the app such as 'myforum_production')"
  ) { |value| @application = value }
  
  opts.on("-wWEB_ROOT", "--webroot WEB_ROOT",
    "Full path to web root (e.g: /home/rails/myforum/current/public)"
  ) { |value| @webroot = value }
  
  opts.on("-dDOMAIN_NAME", "--domain DOMAIN_NAME",
    "Domain name for application (e.g: www.example.com)"
  ) { |value| @domain = value }
  
  opts.on("-a", "--aliases ALIASES",
    "Aliases for domain name, comma separated (e.g: www.example.org,www.example.net)"
  ) { |value| @aliases = value.to_s.split(',').join(' ')}
  
  opts.on("-p", "--port MONGREL_PORT",
    "Port of the first mongrel service"
  ) { |value| @port = value.to_i }
  
  opts.on("-s", "--servers MONGRELS",
    "Number of mongrel servers running (default: #{@mongrels})"
  ) { |value| @mongrels = value.to_i }
  
  opts.on("-h", "--mongrelhost MONGREL_HOST",
    "ip/host where mongrel is running (default: #{@mongrelhost})"
  ) { |value| @mongrelhost = value }
 
  begin
    opts.parse(ARGV)
    raise OptionParser::ParseError,
      "You must supply the required arguments" unless has_required_options?
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

@balancer_members = (@port..@port+@mongrels-1).collect {|i| "  server #{@mongrelhost}:#{i};" }.join("\n")

TEMPLATE = <<EOT
upstream #{@application}_mongrels {
  fair;
  # List of mongrels
#{@balancer_members}
}
server {
  server_name #{@application}.#{`hostname`.chomp} #{@domain} #{@aliases};
  root #{@webroot};
  access_log /var/log/web/#{@application}.log main;
    
  # Capistrano maintenance message support
  if (-f $document_root/system/maintenance.html) {
    rewrite ^(.*)$ /system/maintenance.html last;
    break;
  }

  location / {
    ## General Rails error page stuff
    error_page 404              /404.html;
    error_page 422              /422.html;
    error_page 500 502 503 504  /500.html;
    error_page 403              /403.html;

    # If the file exists then stop here. Saves 4 more stats and some
    # rewrites.
    if (-f $request_filename) { 
      break; 
    }
    # Rails page caching
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }
    # If it hasn't been handled above, and isn't a static file
    # then send to the mongrels
    if (!-f $request_filename) {
      proxy_pass http://#{@application}_mongrels;
    }
  }
}
EOT

webserver_config = File.join("/etc", WEBSERVER)
appfile = "rails-#{@application}"

sites_available = File.join(webserver_config, 'sites-available')
sites_enabled = sites_available.sub("available", "enabled")
sites_archived = sites_available.sub("available", "archived")

filename = File.join(sites_available, appfile)
archivefile = File.join(sites_archived, appfile + "." + Time.now.strftime('%y%m%d%H%M%S'))
enablelink = File.join(sites_enabled, appfile)

if File.exists?(filename)
  FileUtils.mkdir_p(sites_archived)
  FileUtils.cp filename, archivefile
end

File.open(filename, "w") { |f| f.write TEMPLATE }
FileUtils.ln_s(filename, enablelink, :force => true)
