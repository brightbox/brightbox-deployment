#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox @application system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#


WEBSERVER='nginx'
require 'brightbox/webserver-common'

def standard_server_contents
<<-EOT
  server_name #{@domain} #{local_app_alias} #{@aliases};
  root #{@webroot};
  access_log /var/log/web/#{@application}.log main;
    
  # Capistrano maintenance message support
  if (-f $document_root/system/maintenance.html) {
    rewrite ^(.*)$ /system/maintenance.html last;
    break;
  }
EOT
end

def standard_location_contents
<<-EOT
    ## General Rails error page stuff
    error_page 404              /404.html;
    error_page 422              /422.html;
    error_page 500 502 503 504  /500.html;
    error_page 403              /403.html;

    # If the file exists then stop here. Saves 4 more stats and some
    # rewrites.
    if (-f $request_filename) { 
      expires max;
      break; 
    }
    # Rails page caching
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }
    # If it hasn't been handled above, and isn't a static file
    # then send to the mongrels
    if (!-f $request_filename) {
      proxy_pass http://#{@application}_mongrels;
    }
EOT
end

def http_config
<<-EOT
#{config_time_stamp}
upstream #{@application}_mongrels {
  fair;
  # List of mongrels
#{balancer_members}
}
server {
  listen 80;
  #{standard_server_contents}
  location / {
    #{standard_location_contents}
  }
}
EOT
end

def ssl_certificate_key
  if @key_file
    "  ssl_certificate_key #{key_file};"
  end
end


def https_config
<<-EOT
#{config_time_stamp}
server {
  listen 443;
  ssl on;
  ssl_certificate #{@certificate_file};
  #{ssl_certificate_key}
  #{standard_server_contents}
  location / {
    #{standard_location_contents}
  }
}
EOT
end

def balancer_members
  @mongrelhost.split(",").collect do |host|
    (@port..@port+@mongrels-1).collect do |i|
      "  server #{host}:#{i};"
    end
  end.join("\n")
end

#MAIN PROGRAM

#Create a normal HTTP config
@config=http_config
configure_site(@application)

#Create an SSL site if requested
if @certificate
  @config=https_config
  configure_site("default-ssl")
end

