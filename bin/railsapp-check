#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox deployment system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'brightbox/database_yml/mysql'

def has_required_options?
  [@application].all?
end

def backup_available?(name)
  !File.exists?(name) ||
  File.file?(name) && File.stat(name).writable?
end

require 'tempfile'
require 'fileutils'
# Side effect of doing it with temp files is that an altered database.yml ends up with 0600 permissions.
def write_file_with_backup(filename)
  backupname = filename + '.bak'
  tempname = ''
  abort "Backup file #{File.basename(backupname)} not writable" unless backup_available?(backupname)
  Tempfile.open(File.basename(filename)) do |file|
    tempname = file.path 
    yield file
  end
  FileUtils.mv(filename, backupname) if File.file?(filename)
  FileUtils.cp(tempname, filename)
end

#Rewrite the database.yml
def rewrite_database_yml
  write_file_with_backup(@dbyml_filename) do |file|
    @dbfile.dump(file)
  end
end

def parse_options
  OptionParser.new do |opts|
    opts.banner = "Redirects the database.yml file to the Brightbox mysql database\n"
    opts.banner << "Usage: #{$0} [options] <path_to_database.yml>\n\n"

    opts.on("-n APPLICATION_NAME", "--name APPLICATION_NAME",
            "Name of application.",
            "(A short useful name such as 'myforum')") do | value |
            @application = value
            end

    opts.on_tail("-h", "--help", "Display this help message") do |opts|
      puts opts
      exit 0
    end

    begin
      opts.parse!(ARGV)
      raise OptionParser::ParseError,
        "You must supply all of the arguments" unless has_required_options?
    rescue OptionParser::ParseError => e
      warn e.message
      puts opts
      exit 1
    end
  end
end

def check_arguments
  @progname = File.basename($0)
  abort "Please provide the database.yml to check, e.g. '#{@progname} config/database.yml'" if ARGV.empty?
  abort "Too many arguments; please provide a single filename" unless ARGV.length == 1
  @dbyml_filename = ARGV.shift
  abort "'#{@dbyml_filename}' is not a plain file" if File.exists?(@dbyml_filename) && !File.file?(@dbyml_filename)
end

def fixup_database_yml
  @dbfile = Brightbox::DatabaseYml::Mysql.new(@application, @dbyml_filename)
rescue ArgumentError => e
  warn "Not a valid YAML file"
  warn e.message
  exit 2
end

def print_errors
  @dbfile.errors.each do |error|
    warn error
  end
end

#Main program
parse_options
check_arguments
fixup_database_yml
if @dbfile.errors.empty?
  rewrite_database_yml if @dbfile.changed?
else
  print_errors
  exit 2
end
