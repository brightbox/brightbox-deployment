#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox deployment system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#

require 'rubygems'
require 'optparse'
require 'fileutils'
require 'brightbox/version'

@size = '100M'
@keep = '10'

def has_required_options?
  [@application, @logdir].all?
end

opts = OptionParser.new do |opts|
  opts.banner = "#{opts.program_name} creates a logrotate config for a Rails app\n#{opts.banner}"

  opts.on("-nAPPLICATION_NAME", "--name APPLICATION_NAME",
    "Name of application (a short useful name","for the app such as 'myforum')"
  ) { |value| @application = value }
  opts.on("-lLOG_DIR", "--logdir LOG_DIR",
    "Full path to the directory containing the","rails logs","(e.g: /home/rails/myforum/current/log)"
  ) { |value| @logdir = value }
  opts.on("-sMAX_LOG_SIZE", "--size MAX_LOG_SIZE",
    "When the current log file reaches this","size, rotate it (e.g: 100M, 1G).","Default: #{@size}"
  ) { |value| @size = value }
  opts.on("-kPERIOD_TO_KEEP", "--keep PERIOD_TO_KEEP",
    "Number of previous compressed logs to keep","(default: #{@keep})"
  ) { |value| @keep = value }
 
  begin
    opts.parse!(ARGV)
    raise OptionParser::ParseError,
      "You must supply the required arguments" unless has_required_options?
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end


def logrotate_config
  %Q{
# Created by #{opts.program_name} at #{Time.now}
#{@logdir}/*.log {
  compress
  size #{@size}
  rotate #{@keep}
  missingok
  compress
  copytruncate
}
}
end

filename = "/etc/logrotate.d/rails-#{@application}"

File.open(filename, "w") { |f| f.write logrotate_config }
