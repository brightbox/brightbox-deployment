#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox deployment system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'brightbox/version'

@options = {}

def has_required_options?
  [@server].all?
end

opts = OptionParser.new do |opts|
  opts.banner = "Set up your Rails application for deployment\n"
  opts.banner << "Usage: #{opts.program_name} [options] <directory_name>\n\n"

  opts.on("-n APPLICATION_NAME", "--name APPLICATION_NAME",
    "Name of application (a short useful",
    "name for the app such as 'myforum')",
    "(defaults to the short name of the server)\n"
  ) { |value| @application = value }
  
  opts.on("-d DOMAIN_NAME", "--domain DOMAIN_NAME",
    "Domain name for application",
    "(e.g: www.example.com)",
    "(defaults to the server name)\n"
  ) { |value| @domain = value }
  
  opts.on("-i SERVER_NAME", "--server SERVER_NAME",
    "Hostname or IP address of your",
    "Brightbox virtual server",
    "(e.g: example-001.vm.brightbox.net)\n"
  ) { |value| @server = value }
  
  opts.on("-a TYPE", "--app TYPE", [:mongrel, :passenger],
    "App server type, mongrel or passenger"
    ) { |value| @app_server = value }

  begin
    opts.parse!(ARGV)
    raise OptionParser::ParseError,
      "You must supply the server name" unless has_required_options?
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end


abort "Please specify the directory containing the Rails app, e.g. '#{opts.program_name} .'" if ARGV.empty?
abort "Too many arguments; please provide a single directory name." unless ARGV.length == 1
abort "'#{ARGV.first}' does not exist." unless File.exists?(ARGV.first)
abort "'#{ARGV.first}' is not a directory." unless File.directory?(ARGV.first)

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

def deploy_requires(app_server)
  header = %Q{gem 'brightbox', '>=#{Brightbox::VERSION}'
    require 'brightbox/recipes'
    }
  case app_server
  when :passenger
    header << %Q{require 'brightbox/passenger'}
  end
  return header
end

@domain ||= @server
@application ||= @server.gsub(/(-\d{3})?\..*\Z/,'')

files = {
  "Capfile" => unindent(<<-FILE),
    # Generated with '#{opts.program_name}' on #{Time.now}
    load 'deploy' if respond_to?(:namespace) # cap2 differentiator
    Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }
    load 'config/deploy'
  FILE

  "lib/tasks/bbgem.rake" => unindent(<<-FILE),
    # Generated with '#{opts.program_name}' on #{Time.now}
unless Rake::Task.task_defined?("gems:install") 
  def install_gems
    gems={
      "ferret" => "~> 0.11",
      "will_paginate" => "> 0"
    }
    gems.each_pair do |gem, version|
      puts "Checking for \#{gem} at \#{version}"
      system("gem spec \#{gem} --version '\#{version}' 2>/dev/null|egrep -q '^name:' ||
              sudo gem install -y --no-ri --no-rdoc --version '\#{version}' \#{gem}")
    end
  end

  def gems_upgrade_notice
    puts "This is a dummy task installed by the Brightbox command"
    puts "If you need gems to make your application work"
    puts "Uncomment the install command and alter the gems on the list"
    puts "... or upgrade to Rails >= 2.1 and use the inbuilt facilities"
  end

  namespace(:gems) do
    desc "Installs all required gems for this application."
    task :install do
      gems_upgrade_notice
      #install_gems 
    end
  end
end

unless Rake::Task.task_defined?("db:create") 

  namespace(:db) do
    task :create do
      puts "This is a dummy task installed by the Brightbox command"
      puts "Your Rails version is too old to support the db:create task"
      puts "Either upgrade to Rails >=2.0 to use the inbuilt facilities"
      puts "Or create the database by hand if you haven't already"
    end
  end
end
unless Rake::Task.task_defined?("db:check:config") 

  def pe(message)
    p "\#{RAILS_ENV}: \#{message}"
  end

  def brightbox_sanity_checks(config)
    %w(username password database host).each do |entry|
      pe "\#{entry} entry missing" unless config[entry]
    end
    db=config['database']
    host=config['host']
    if host && host != 'sqlreadwrite.brightbox.net'
      pe "using '\#{host}', not the 'sqlreadwrite.brightbox.net' cluster"
    elsif db && db !~ /\\A\#{config['username']}/
      pe "database name should start with '\#{config['username']}' if using cluster"
    end
  end
  
    require 'yaml'

    def read_database_yml
      db_yml = File.join(File.dirname(__FILE__), "..", "..", "config", "database.yml")
      if File.exist?(db_yml)
        return YAML.load(File.open(db_yml))
      else
        return {}
      end
    end

    namespace(:db) do
  namespace(:check) do
    desc "Check database.yml config"
    task :config do
      p "Checking database mysql configuration..."
      if config=read_database_yml[RAILS_ENV]
        case config['adapter']
        when nil
          pe "adapter entry missing."
        when 'mysql'
          brightbox_sanity_checks(config)
        else
          pe "using \#{config['adapter']} - halting checks"
        end
      else
        pe "section missing."
      end
    end
  end
    end
  end


  FILE

"config/deploy.rb" => unindent(<<-FILE),
    ## Generated with '#{opts.program_name}' on #{Time.now}
    #{deploy_requires(@app_server)}

    # The name of your application.  Used for deployment directory and filenames
    # and Apache configs. Should be unique on the Brightbox
    set :application, "#{@application}"

    # Primary domain name of your application. Used in the Apache configs
    set :domain, "#{@domain}"

    ## List of servers
    server "#{@server}", :app, :web, :db, :primary => true

    # Target directory for the application on the web and app servers.
    set(:deploy_to) { File.join("", "home", user, application) }

    # URL of your source repository. This is the default one that comes on 
    # every Brightbox, you can use your own (we'll let you :)
    set :repository, "."
    set :scm, :none
    set :deploy_via, :copy

    ### Other options you can set ##
    # Comma separated list of additional domains for Apache
    # set :domain_aliases, "www.example.com,dev.example.com"
    
    ## Dependencies
    # Set the commands and gems that your application requires. e.g.
    # depend :remote, :gem, "will_paginate", ">=2.2.2"
    # depend :remote, :command, "brightbox"
    # 
    # Gem with a source (such as github)
    # depend :remote, :gem, "tmm1-amqp", ">=0.6.0", :source => "http://gems.github.com"
    # 
    # Specify your specific Rails version if it is not vendored
    # depend :remote, :gem, "rails", "=2.2.2"
    #
    # Set the apt packages your application or gems require. e.g.
    # depend :remote, :apt, "libxml2-dev"

    ## Local Shared Area
    # These are the list of files and directories that you want
    # to share between the releases of your application on a particular
    # server. It uses the same shared area as the log files.
    #
    # NOTE: local areas trump global areas, allowing you to have some
    # servers using local assets if required.
    #
    # So if you have an 'upload' directory in public, add 'public/upload'
    # to the :local_shared_dirs array.
    # If you want to share the database.yml add 'config/database.yml'
    # to the :local_shared_files array.
    #
    # The shared area is prepared with 'deploy:setup' and all the shared
    # items are symlinked in when the code is updated.
    # set :local_shared_dirs, %w(public/upload)
    # set :local_shared_files, %w(config/database.yml)
    
    ## Global Shared Area
    # These are the list of files and directories that you want
    # to share between all releases of your application across all servers.
    # For it to work you need a directory on a network file server shared
    # between all your servers. Specify the path to the root of that area
    # in :global_shared_path. Defaults to the same value as :shared_path.
    # set :global_shared_path, "/srv/share/myapp"
    #
    # NOTE: local areas trump global areas, allowing you to have some
    # servers using local assets if required.
    #
    # Beyond that it is the same as the local shared area.
    # So if you have an 'upload' directory in public, add 'public/upload'
    # to the :global_shared_dirs array.
    # If you want to share the database.yml add 'config/database.yml'
    # to the :global_shared_files array.
    #
    # The shared area is prepared with 'deploy:setup' and all the shared
    # items are symlinked in when the code is updated.
    # set :global_shared_dirs, %w(public/upload)
    # set :global_shared_files, %w(config/database.yml)
    
    # SSL Certificates. If you specify an SSL certificate name then
    # the gem will create an 'https' configuration for this application
    # TODO: Upload and install the keys on the server
    # set :ssl_certificate, "/path/to/certificate/for/my_app.crt"
    # set :ssl_key, "/path/to/key/for/my_app.key
    # or
    # set :ssl_certificate, "name_of_installed_certificate"

    ## Static asset caching.
    # By default static assets served directly by the web server are
    # cached by the client web browser for 10 years, and cache invalidation
    # of static assets is handled by the Rails helpers using asset
    # timestamping.
    # You may need to adjust this value if you have hard coded static
    # assets, or other special cache requirements. The value is in seconds.
    # set :max_age, 315360000

    # SSH options. The forward agent option is used so that loopback logins
    # with keys work properly
    # ssh_options[:forward_agent] = true
    
    # Forces a Pty so that svn+ssh repository access will work. You
    # don't need this if you are using a different SCM system. Note that
    # ptys stop shell startup scripts from running.
    default_run_options[:pty] = true

    ## Logrotation
    # Where the logs are stored. Defaults to <shared_path>/log
    # set :log_dir, "central/log/path"
    # The size at which to rotate a log. e.g 1G, 100M, 5M. Defaults to 100M
    # set :log_max_size, "100M"
    # How many old compressed logs to keep. Defaults to 10
    # set :log_keep, "10"

    ## Version Control System
    # Which version control system. Defaults to subversion if there is
    # no 'set :scm' command.
    # set :scm, :git
    # set :scm_username, "rails"
    # set :scm_password, "mysecret"
    # or be explicit
    # set :scm, :subversion

    ## Deployment settings
    # The brightbox gem deploys as the user 'rails' by default and
    # into the 'production' environment. You can change these as required.
    # set :user, "rails"
    # set :rails_env, :production

    ## Command running settings
    # use_sudo is switched off by default so that commands are run
    # directly as 'user' by the run command. If you switch on sudo
    # make sure you set the :runner variable - which is the user the
    # capistrano default tasks use to execute commands.
    # NB. This just affects the default recipes unless you use the
    # 'try_sudo' command to run your commands.
    # set :use_sudo, false
    # set :runner, user\n\n
  FILE
}

mongrel_deploy = unindent(<<-FILE
    ## Mongrel settings
    # Addresses that Mongrel listens on. Defaults to :local
    # Use :remote if your mongrels are on a different host to the web
    # server.
    # set :mongrel_host, :local
    # set :mongrel_host, :remote
    # set :mongrel_host, "192.168.1.1"
    # Port number where mongrel starts. Defaults to 9200
    # set :mongrel_port, 9200
    # Number of mongrel servers to start. Defaults to 2
    # set :mongrel_servers, 2

    ## Mongrel monitoring settings
    # Url to check to make sure application is working.
    # Defaults to "http://localhost"
    # set :mongrel_check_url, "http://localhost"
    # set :mongrel_check_url, "http://user:password@localhost/path/to/check"
    # Maximum amount of memory to use per mongrel instance. Default 110Mb
    # set :mongrel_max_memory, 110
    # Maximum cpu allowable per mongrel. Defaults to 80%
    # set :mongrel_max_cpu, 80
  FILE
)
  
passenger_deploy = unindent(<<-FILE
   ## Passenger Configuration
   # Set the method of restarting passenger
   # Defaults to :hard which is used to instantly free up database connections
   # :soft uses the standard touch tmp/restart.txt which leaves database connections
   # lingering until the workers time out
   # set :passenger_restart_strategy, :hard
  FILE
)
  
case @app_server
when :passenger
  files["config/deploy.rb"] << passenger_deploy
when :mongrel
  files["config/deploy.rb"] << mongrel_deploy
end

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] `#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
  elsif !File.exists?(File.dirname(file))
    warn "[skip] directory `#{File.dirname(file)}' does not exist"
  else
    puts "[add] writing `#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] ready for deployment!"
