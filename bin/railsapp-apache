#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox deployment system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#

require 'rubygems'
require 'optparse'
require 'fileutils'

@mongrelhost = "127.0.0.1"
@mongrels = 2
@aliases = nil
@certificate = nil
@key_file = nil
@app_name = File.basename $0
@apache_http_modules = %w(proxy_balancer proxy_http rewrite)
@apache_https_modules = %w(ssl headers)

def has_required_options?
  [@application, @mongrelhost, @mongrels, @webroot, @domain,
    @port].all? &&
    (@certificate || @certificate_key.nil?)
end

def certificate_file
  return @certificate if File.file?(@certificate)
  cert_base = File.basename(@certificate, File.extname(@certificate))
  test_path = File.join('','etc','ssl','certs', cert_base + '.*')
  candidates = Dir[test_path]
  if candidates.empty?
    abort "#{@app_name}: Unable to find certificate file for #{@cert_base}"
  end
  result = candidates.pop
  unless candidates.empty?
    abort "#{@app_name}: #{@cert_base} resolves to more than one file. Please be more specific"
  end
  result
end

def key_file
  if @certificate_key
    return @certificate_key if File.file?(@certificate_key)
    key_base = File.basename(@certificate_key, File.extname(@certificate_key))
  else
    key_base = File.basename(@certificate, File.extname(@certificate))
  end
  test_path = File.join('','etc','ssl','private', key_base + '.*')
  candidates = Dir[test_path]
  return nil if candidates.empty?
  result = candidates.pop
  unless candidates.empty?
    abort "#{@app_name}: #{key_base} resolves to more than one file. Please be more specific"
  end
  result
end

OptionParser.new do |opts|
  opts.banner = "brightbox-apache creates an Apache config for a Rails app\n"
  opts.banner << "Usage: #{@app_name} [options] [args]"

  opts.on("-n APPLICATION_NAME", "--name APPLICATION_NAME",
    "Name of application (a short useful name for the app such as 'myforum')"
  ) { |value| @application = value }
  
  opts.on("-w", "--webroot WEB_ROOT",
    "Full path to web root (e.g: /home/rails/myforum/current/public)"
  ) { |value| @webroot = value }
  
  opts.on("-d", "--domain DOMAIN_NAME",
    "Domain name for application (e.g: www.example.com)"
  ) { |value| @domain = value }
  
  opts.on("-a", "--aliases ALIASES",
    "Aliases for domain name, comma separated (e.g: www.example.org,www.example.net)"
  ) { |value| @aliases = value.to_s.split(',').join(' ')}
  
  opts.on("-p", "--port MONGREL_PORT", Integer,
    "Port of the first mongrel service"
  ) { |value| @port = value.to_i }
  
  opts.on("-s", "--servers MONGRELS", Integer,
    "Number of mongrel servers running (default: #{@mongrels})"
  ) { |value| @mongrels = value.to_i }
  
  opts.on("-h", "--mongrelhost MONGREL_HOST",
    "ip/host where mongrel is running (default: #{@mongrelhost})"
  ) { |value| @mongrelhost = value }

  opts.on("-c", "--ssl-cert CERTIFICATE_NAME",
          "create an SSL configuration using CERTIFICATE_NAME"
         ) { |value| @certificate = value }

  opts.on("-k", "--ssl-key KEY_NAME",
          "Name of private key to use CERTIFICATE"
         ) { |value| @certificate_key = value }
 
  begin
    opts.parse(ARGV)
    raise OptionParser::ParseError,
      "You must supply the required arguments" unless has_required_options?
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
  if @certificate
    @certificate_file = certificate_file
    @key_file = key_file
  end
end

  def configure_site(site_name)
    filename = "/etc/apache2/sites-available/rails-#{site_name}"
    if File.exists?(filename)
      FileUtils.mkdir_p("/etc/apache2/sites-archived")
      FileUtils.cp filename, "/etc/apache2/sites-archived/rails-#{site_name}.#{Time.now.strftime('%y%m%d%H%M%S')}"
    end
    File.open(filename, "w") { |f| f.write @config }
    FileUtils.ln_s(filename, "/etc/apache2/sites-enabled/rails-#{site_name}", :force => true)
  end

  def ssl_certificate_key
    if @key_file
      "  SSLCertificateKeyFile #{key_file}"
    end
  end

def http_config
  %Q{
# Created by brightbox-apache at #{Time.now}
<VirtualHost *:80>
  ServerName #{@domain}
  ServerAlias #{@application}.#{`hostname`.chomp} #{@aliases}
  DocumentRoot #{@webroot}

  <Directory "#{@webroot}">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>

  # Configure mongrel_cluster
  <Proxy balancer://mongrel_cluster>
 #{@balancer_members}
  </Proxy>

  ErrorLog /var/log/web/#{@application}.err
  CustomLog /var/log/web/#{@application}.log combined

  # Rails specific rewrite rules
  Include /etc/apache2/brightbox-common

  # Add any access limit directives here
  <Location />
    Allow from all
  </Location>
</VirtualHost>
  }
end


def https_config
  %Q{
# Created by brightbox-apache at #{Time.now}
<VirtualHost _default_:443>
  SSLEngine On
  SSLCertificateFile #{@certificate_file}
  #{ssl_certificate_key}
  RequestHeader set X_FORWARDED_PROTO "https"
  ServerName #{@domain}
  ServerAlias #{@application}.#{`hostname`.chomp} #{@aliases}
  DocumentRoot #{@webroot}

  <Directory "#{@webroot}">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>

  # Configure mongrel_cluster
  <Proxy balancer://mongrel_cluster>
 #{@balancer_members}
  </Proxy>

  ErrorLog /var/log/web/#{@application}.err
  CustomLog /var/log/web/#{@application}.log combined

  # Rails specific rewrite rules
  Include /etc/apache2/brightbox-common

  # Add any access limit directives here
  <Location />
    Allow from all
  </Location>
</VirtualHost>
  }
end

@balancer_members = (@port..@port+@mongrels-1).collect {|i| "    BalancerMember http://#{@mongrelhost}:#{i}/ retry=5" }.join("\n")

def activate_modules(modules)
  modules.each do |mod|
    system %Q{/usr/sbin/a2enmod "#{mod}"}
  end
end

def configure_ports
  File.open("/etc/apache2/ports.conf", "w") do |f|
    f.puts "Listen 80"
    f.puts "Listen 443" if File.file?("/etc/apache2/sites-enabled/rails-default-ssl")
  end
end


#MAIN PROGRAM


#Create a normal HTTP config
@config=http_config
configure_site(@application)
activate_modules(@apache_http_modules)
  
#Create an SSL site if requested
if @certificate
  @config=https_config
  configure_site("default-ssl")
  activate_modules(@apache_https_modules)
end

# Make apache listen on the right ports
configure_ports

