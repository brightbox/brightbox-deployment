#!/usr/bin/env ruby
#    Brightbox - Easy Ruby Web Application Deployment
#    Copyright (C) 2008, Neil Wilson, Brightbox Systems
#
#    This file is part of the Brightbox deployment system
#
#    Brightbox gem is free software: you can redistribute it and/or modify it
#    under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General
#    Public License along with this program.  If not, see
#    <http://www.gnu.org/licenses/>.
#
WEBSERVER="apache2"
require "brightbox/webserver-common"

def ssl_certificate_key
  if @key_file
    "  SSLCertificateKeyFile #{key_file}"
  end
end

def standard_server_contents 
  %Q@
  ServerName #{@domain}
  ServerAlias #{local_app_alias} #{@aliases}
  DocumentRoot #{@webroot}

  <Directory "#{@webroot}">
    Header set Cache-Control "max-age=#{@maxage}"
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>

  <Directory "#{@webroot}/system">
    Header set Cache-Control "no-cache"
  </Directory>

  # Configure mongrel_cluster
  <Proxy balancer://mongrel_cluster>
 #{balancer_members}
  </Proxy>

  ErrorLog /var/log/web/#{@application}.err
  CustomLog /var/log/web/#{@application}.log combined

  # Rails specific rewrite rules
  RewriteEngine On

  # Check for maintenance file and redirect all requests
  ErrorDocument 503 /system/maintenance.html
  RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
  RewriteCond %{SCRIPT_FILENAME} !^/system
  RewriteRule ^.*$ /system/maintenance.html [R=503,L]

  # Rewrite index to check for static
  RewriteRule ^/$ /index.html [QSA]

  # Rewrite to check for Rails cached page
  RewriteRule ^([^.]+)$ $1.html [QSA]

  # Redirect all non-static requests to cluster
  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f [OR]
  RewriteCond %{REQUEST_METHOD} !^(GET|HEAD)
  RewriteRule ^/(.*)$ balancer://mongrel_cluster%{REQUEST_URI} [P,QSA,L]

  # Deflate
  AddOutputFilterByType DEFLATE text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript
  BrowserMatch ^Mozilla/4 gzip-only-text/html
  BrowserMatch ^Mozilla/4\.0[678] no-gzip
  BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html

  # Add any access limit directives here
  <Location />
    Allow from all
  </Location>
@
end


def http_config
  %Q@
#{config_time_stamp}
<VirtualHost *:80>
  #{standard_server_contents}
</VirtualHost>
  @
end

def https_config
  %Q@
#{config_time_stamp}
<VirtualHost _default_:443>
  SSLEngine On
  SSLCertificateFile #{@certificate_file}
  #{ssl_certificate_key}
  RequestHeader set X_FORWARDED_PROTO "https"
  #{standard_server_contents}
</VirtualHost>
  @
end


def activate_modules(modules)
  enmod="/usr/sbin/a2enmod"
  if File.executable?(enmod)
    modules.each do |mod|
      system %Q{#{enmod} "#{mod}"}
    end
  end
end

def configure_ports
  File.open("/etc/apache2/ports.conf", "w") do |f|
    f.puts "Listen 80"
    f.puts "Listen 443" if File.file?("/etc/apache2/sites-enabled/rails-default-ssl")
  end
end

def balancer_members
  @mongrelhost.split(",").collect do |host|
    (@port..@port+@mongrels-1).collect do |i|
      "    BalancerMember http://#{host}:#{i} retry=5"
    end
  end.join("\n")
end

#MAIN PROGRAM
@apache_http_modules = %w(proxy_balancer proxy_http rewrite headers deflate)
@apache_https_modules = %w(ssl)

#Create a normal HTTP config
@config=http_config
configure_site(@application)
activate_modules(@apache_http_modules)
  
#Create an SSL site if requested
if @certificate
  @config=https_config
  configure_site("default-ssl")
  activate_modules(@apache_https_modules)
end

# Make apache listen on the right ports
configure_ports
